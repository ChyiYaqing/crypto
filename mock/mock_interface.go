// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package cryptomock is a generated GoMock package.
package cryptomock

import (
	gomock "github.com/golang/mock/gomock"
	crypto "github.com/meshplus/crypto"
	hash "hash"
	io "io"
	reflect "reflect"
)

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockEngine) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockEngineMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockEngine)(nil).GetLevel))
}

// Rander mocks base method
func (m *MockEngine) Rander() (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rander")
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rander indicates an expected call of Rander
func (mr *MockEngineMockRecorder) Rander() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rander", reflect.TypeOf((*MockEngine)(nil).Rander))
}

// GetHash mocks base method
func (m *MockEngine) GetHash(mode int) (crypto.Hasher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", mode)
	ret0, _ := ret[0].(crypto.Hasher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash
func (mr *MockEngineMockRecorder) GetHash(mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockEngine)(nil).GetHash), mode)
}

// GetSecretKey mocks base method
func (m *MockEngine) GetSecretKey(mode int, pwd, key []byte) (crypto.SecretKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretKey", mode, pwd, key)
	ret0, _ := ret[0].(crypto.SecretKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretKey indicates an expected call of GetSecretKey
func (mr *MockEngineMockRecorder) GetSecretKey(mode, pwd, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretKey", reflect.TypeOf((*MockEngine)(nil).GetSecretKey), mode, pwd, key)
}

// GetVerifyKey mocks base method
func (m *MockEngine) GetVerifyKey(key []byte, mode int) (crypto.VerifyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyKey", key, mode)
	ret0, _ := ret[0].(crypto.VerifyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyKey indicates an expected call of GetVerifyKey
func (mr *MockEngineMockRecorder) GetVerifyKey(key, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyKey", reflect.TypeOf((*MockEngine)(nil).GetVerifyKey), key, mode)
}

// GetSignKey mocks base method
func (m *MockEngine) GetSignKey(index []byte) (crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignKey", index)
	ret0, _ := ret[0].(crypto.SignKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignKey indicates an expected call of GetSignKey
func (mr *MockEngineMockRecorder) GetSignKey(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignKey", reflect.TypeOf((*MockEngine)(nil).GetSignKey), index)
}

// ImportSignKey mocks base method
func (m *MockEngine) ImportSignKey(key []byte, mode int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSignKey", key, mode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSignKey indicates an expected call of ImportSignKey
func (mr *MockEngineMockRecorder) ImportSignKey(key, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSignKey", reflect.TypeOf((*MockEngine)(nil).ImportSignKey), key, mode)
}

// CreateSignKey mocks base method
func (m *MockEngine) CreateSignKey(write bool, mode int) ([]byte, crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignKey", write, mode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(crypto.SignKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSignKey indicates an expected call of CreateSignKey
func (mr *MockEngineMockRecorder) CreateSignKey(write, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignKey", reflect.TypeOf((*MockEngine)(nil).CreateSignKey), write, mode)
}

// GetEncKey mocks base method
func (m *MockEngine) GetEncKey(key []byte, mode int) (crypto.EncKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncKey", key, mode)
	ret0, _ := ret[0].(crypto.EncKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncKey indicates an expected call of GetEncKey
func (mr *MockEngineMockRecorder) GetEncKey(key, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncKey", reflect.TypeOf((*MockEngine)(nil).GetEncKey), key, mode)
}

// GetDecKey mocks base method
func (m *MockEngine) GetDecKey(index []byte) (crypto.DecKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecKey", index)
	ret0, _ := ret[0].(crypto.DecKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecKey indicates an expected call of GetDecKey
func (mr *MockEngineMockRecorder) GetDecKey(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecKey", reflect.TypeOf((*MockEngine)(nil).GetDecKey), index)
}

// ImportDecKey mocks base method
func (m *MockEngine) ImportDecKey(key []byte, mode int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDecKey", key, mode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDecKey indicates an expected call of ImportDecKey
func (mr *MockEngineMockRecorder) ImportDecKey(key, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDecKey", reflect.TypeOf((*MockEngine)(nil).ImportDecKey), key, mode)
}

// CreateDecKey mocks base method
func (m *MockEngine) CreateDecKey(write bool, mode int) ([]byte, crypto.DecKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDecKey", write, mode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(crypto.DecKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDecKey indicates an expected call of CreateDecKey
func (mr *MockEngineMockRecorder) CreateDecKey(write, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDecKey", reflect.TypeOf((*MockEngine)(nil).CreateDecKey), write, mode)
}

// MockSecretKey is a mock of SecretKey interface
type MockSecretKey struct {
	ctrl     *gomock.Controller
	recorder *MockSecretKeyMockRecorder
}

// MockSecretKeyMockRecorder is the mock recorder for MockSecretKey
type MockSecretKeyMockRecorder struct {
	mock *MockSecretKey
}

// NewMockSecretKey creates a new mock instance
func NewMockSecretKey(ctrl *gomock.Controller) *MockSecretKey {
	mock := &MockSecretKey{ctrl: ctrl}
	mock.recorder = &MockSecretKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretKey) EXPECT() *MockSecretKeyMockRecorder {
	return m.recorder
}

// Encrypt mocks base method
func (m *MockSecretKey) Encrypt(src []byte, reader io.Reader) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", src, reader)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockSecretKeyMockRecorder) Encrypt(src, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockSecretKey)(nil).Encrypt), src, reader)
}

// Decrypt mocks base method
func (m *MockSecretKey) Decrypt(src []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", src)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockSecretKeyMockRecorder) Decrypt(src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockSecretKey)(nil).Decrypt), src)
}

// Destroy mocks base method
func (m *MockSecretKey) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (mr *MockSecretKeyMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSecretKey)(nil).Destroy))
}

// MockPublicKey is a mock of PublicKey interface
type MockPublicKey struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyMockRecorder
}

// MockPublicKeyMockRecorder is the mock recorder for MockPublicKey
type MockPublicKeyMockRecorder struct {
	mock *MockPublicKey
}

// NewMockPublicKey creates a new mock instance
func NewMockPublicKey(ctrl *gomock.Controller) *MockPublicKey {
	mock := &MockPublicKey{ctrl: ctrl}
	mock.recorder = &MockPublicKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicKey) EXPECT() *MockPublicKeyMockRecorder {
	return m.recorder
}

// GetKeyInfo mocks base method
func (m *MockPublicKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo
func (mr *MockPublicKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockPublicKey)(nil).GetKeyInfo))
}

// Verify mocks base method
func (m *MockPublicKey) Verify(msg []byte, hasher hash.Hash, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, hasher, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockPublicKeyMockRecorder) Verify(msg, hasher, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPublicKey)(nil).Verify), msg, hasher, sig)
}

// Encrypt mocks base method
func (m *MockPublicKey) Encrypt(msg []byte, reader io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg, reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockPublicKeyMockRecorder) Encrypt(msg, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPublicKey)(nil).Encrypt), msg, reader)
}

// Bytes mocks base method
func (m *MockPublicKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockPublicKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPublicKey)(nil).Bytes))
}

// MockPrivateKey is a mock of PrivateKey interface
type MockPrivateKey struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateKeyMockRecorder
}

// MockPrivateKeyMockRecorder is the mock recorder for MockPrivateKey
type MockPrivateKeyMockRecorder struct {
	mock *MockPrivateKey
}

// NewMockPrivateKey creates a new mock instance
func NewMockPrivateKey(ctrl *gomock.Controller) *MockPrivateKey {
	mock := &MockPrivateKey{ctrl: ctrl}
	mock.recorder = &MockPrivateKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrivateKey) EXPECT() *MockPrivateKeyMockRecorder {
	return m.recorder
}

// Verify mocks base method
func (m *MockPrivateKey) Verify(msg []byte, hasher hash.Hash, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, hasher, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockPrivateKeyMockRecorder) Verify(msg, hasher, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPrivateKey)(nil).Verify), msg, hasher, sig)
}

// Bytes mocks base method
func (m *MockPrivateKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockPrivateKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPrivateKey)(nil).Bytes))
}

// Sign mocks base method
func (m *MockPrivateKey) Sign(msg []byte, hasher hash.Hash, rand io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg, hasher, rand)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockPrivateKeyMockRecorder) Sign(msg, hasher, rand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPrivateKey)(nil).Sign), msg, hasher, rand)
}

// GetKeyInfo mocks base method
func (m *MockPrivateKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo
func (mr *MockPrivateKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockPrivateKey)(nil).GetKeyInfo))
}

// Encrypt mocks base method
func (m *MockPrivateKey) Encrypt(msg []byte, reader io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg, reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockPrivateKeyMockRecorder) Encrypt(msg, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPrivateKey)(nil).Encrypt), msg, reader)
}

// Decrypt mocks base method
func (m *MockPrivateKey) Decrypt(cipher []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", cipher)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockPrivateKeyMockRecorder) Decrypt(cipher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockPrivateKey)(nil).Decrypt), cipher)
}

// Destroy mocks base method
func (m *MockPrivateKey) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (mr *MockPrivateKeyMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPrivateKey)(nil).Destroy))
}

// MockSignKey is a mock of SignKey interface
type MockSignKey struct {
	ctrl     *gomock.Controller
	recorder *MockSignKeyMockRecorder
}

// MockSignKeyMockRecorder is the mock recorder for MockSignKey
type MockSignKeyMockRecorder struct {
	mock *MockSignKey
}

// NewMockSignKey creates a new mock instance
func NewMockSignKey(ctrl *gomock.Controller) *MockSignKey {
	mock := &MockSignKey{ctrl: ctrl}
	mock.recorder = &MockSignKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignKey) EXPECT() *MockSignKeyMockRecorder {
	return m.recorder
}

// GetKeyInfo mocks base method
func (m *MockSignKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo
func (mr *MockSignKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockSignKey)(nil).GetKeyInfo))
}

// Verify mocks base method
func (m *MockSignKey) Verify(msg []byte, hasher hash.Hash, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, hasher, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockSignKeyMockRecorder) Verify(msg, hasher, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSignKey)(nil).Verify), msg, hasher, sig)
}

// Bytes mocks base method
func (m *MockSignKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockSignKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockSignKey)(nil).Bytes))
}

// Sign mocks base method
func (m *MockSignKey) Sign(msg []byte, hasher hash.Hash, rand io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg, hasher, rand)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockSignKeyMockRecorder) Sign(msg, hasher, rand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignKey)(nil).Sign), msg, hasher, rand)
}

// Destroy mocks base method
func (m *MockSignKey) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (mr *MockSignKeyMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSignKey)(nil).Destroy))
}

// MockVerifyKey is a mock of VerifyKey interface
type MockVerifyKey struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyKeyMockRecorder
}

// MockVerifyKeyMockRecorder is the mock recorder for MockVerifyKey
type MockVerifyKeyMockRecorder struct {
	mock *MockVerifyKey
}

// NewMockVerifyKey creates a new mock instance
func NewMockVerifyKey(ctrl *gomock.Controller) *MockVerifyKey {
	mock := &MockVerifyKey{ctrl: ctrl}
	mock.recorder = &MockVerifyKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVerifyKey) EXPECT() *MockVerifyKeyMockRecorder {
	return m.recorder
}

// GetKeyInfo mocks base method
func (m *MockVerifyKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo
func (mr *MockVerifyKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockVerifyKey)(nil).GetKeyInfo))
}

// Verify mocks base method
func (m *MockVerifyKey) Verify(msg []byte, hasher hash.Hash, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, hasher, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockVerifyKeyMockRecorder) Verify(msg, hasher, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerifyKey)(nil).Verify), msg, hasher, sig)
}

// Bytes mocks base method
func (m *MockVerifyKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockVerifyKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockVerifyKey)(nil).Bytes))
}

// MockEncKey is a mock of EncKey interface
type MockEncKey struct {
	ctrl     *gomock.Controller
	recorder *MockEncKeyMockRecorder
}

// MockEncKeyMockRecorder is the mock recorder for MockEncKey
type MockEncKeyMockRecorder struct {
	mock *MockEncKey
}

// NewMockEncKey creates a new mock instance
func NewMockEncKey(ctrl *gomock.Controller) *MockEncKey {
	mock := &MockEncKey{ctrl: ctrl}
	mock.recorder = &MockEncKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEncKey) EXPECT() *MockEncKeyMockRecorder {
	return m.recorder
}

// GetKeyInfo mocks base method
func (m *MockEncKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo
func (mr *MockEncKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockEncKey)(nil).GetKeyInfo))
}

// Encrypt mocks base method
func (m *MockEncKey) Encrypt(msg []byte, reader io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg, reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockEncKeyMockRecorder) Encrypt(msg, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncKey)(nil).Encrypt), msg, reader)
}

// Bytes mocks base method
func (m *MockEncKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockEncKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockEncKey)(nil).Bytes))
}

// MockDecKey is a mock of DecKey interface
type MockDecKey struct {
	ctrl     *gomock.Controller
	recorder *MockDecKeyMockRecorder
}

// MockDecKeyMockRecorder is the mock recorder for MockDecKey
type MockDecKeyMockRecorder struct {
	mock *MockDecKey
}

// NewMockDecKey creates a new mock instance
func NewMockDecKey(ctrl *gomock.Controller) *MockDecKey {
	mock := &MockDecKey{ctrl: ctrl}
	mock.recorder = &MockDecKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDecKey) EXPECT() *MockDecKeyMockRecorder {
	return m.recorder
}

// GetKeyInfo mocks base method
func (m *MockDecKey) GetKeyInfo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInfo")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetKeyInfo indicates an expected call of GetKeyInfo
func (mr *MockDecKeyMockRecorder) GetKeyInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInfo", reflect.TypeOf((*MockDecKey)(nil).GetKeyInfo))
}

// Encrypt mocks base method
func (m *MockDecKey) Encrypt(msg []byte, reader io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", msg, reader)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockDecKeyMockRecorder) Encrypt(msg, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockDecKey)(nil).Encrypt), msg, reader)
}

// Bytes mocks base method
func (m *MockDecKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockDecKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockDecKey)(nil).Bytes))
}

// Decrypt mocks base method
func (m *MockDecKey) Decrypt(cipher []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", cipher)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockDecKeyMockRecorder) Decrypt(cipher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecKey)(nil).Decrypt), cipher)
}

// Destroy mocks base method
func (m *MockDecKey) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (mr *MockDecKeyMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDecKey)(nil).Destroy))
}

// MockLevel is a mock of Level interface
type MockLevel struct {
	ctrl     *gomock.Controller
	recorder *MockLevelMockRecorder
}

// MockLevelMockRecorder is the mock recorder for MockLevel
type MockLevelMockRecorder struct {
	mock *MockLevel
}

// NewMockLevel creates a new mock instance
func NewMockLevel(ctrl *gomock.Controller) *MockLevel {
	mock := &MockLevel{ctrl: ctrl}
	mock.recorder = &MockLevelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLevel) EXPECT() *MockLevelMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockLevel) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockLevelMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockLevel)(nil).GetLevel))
}

// MockPluginRandomFunc is a mock of PluginRandomFunc interface
type MockPluginRandomFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginRandomFuncMockRecorder
}

// MockPluginRandomFuncMockRecorder is the mock recorder for MockPluginRandomFunc
type MockPluginRandomFuncMockRecorder struct {
	mock *MockPluginRandomFunc
}

// NewMockPluginRandomFunc creates a new mock instance
func NewMockPluginRandomFunc(ctrl *gomock.Controller) *MockPluginRandomFunc {
	mock := &MockPluginRandomFunc{ctrl: ctrl}
	mock.recorder = &MockPluginRandomFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginRandomFunc) EXPECT() *MockPluginRandomFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginRandomFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginRandomFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginRandomFunc)(nil).GetLevel))
}

// Rander mocks base method
func (m *MockPluginRandomFunc) Rander() (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rander")
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rander indicates an expected call of Rander
func (mr *MockPluginRandomFuncMockRecorder) Rander() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rander", reflect.TypeOf((*MockPluginRandomFunc)(nil).Rander))
}

// MockPluginHashFunc is a mock of PluginHashFunc interface
type MockPluginHashFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginHashFuncMockRecorder
}

// MockPluginHashFuncMockRecorder is the mock recorder for MockPluginHashFunc
type MockPluginHashFuncMockRecorder struct {
	mock *MockPluginHashFunc
}

// NewMockPluginHashFunc creates a new mock instance
func NewMockPluginHashFunc(ctrl *gomock.Controller) *MockPluginHashFunc {
	mock := &MockPluginHashFunc{ctrl: ctrl}
	mock.recorder = &MockPluginHashFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginHashFunc) EXPECT() *MockPluginHashFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginHashFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginHashFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginHashFunc)(nil).GetLevel))
}

// GetHash mocks base method
func (m *MockPluginHashFunc) GetHash(mode int) (crypto.Hasher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", mode)
	ret0, _ := ret[0].(crypto.Hasher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash
func (mr *MockPluginHashFuncMockRecorder) GetHash(mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockPluginHashFunc)(nil).GetHash), mode)
}

// MockPluginCryptFunc is a mock of PluginCryptFunc interface
type MockPluginCryptFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginCryptFuncMockRecorder
}

// MockPluginCryptFuncMockRecorder is the mock recorder for MockPluginCryptFunc
type MockPluginCryptFuncMockRecorder struct {
	mock *MockPluginCryptFunc
}

// NewMockPluginCryptFunc creates a new mock instance
func NewMockPluginCryptFunc(ctrl *gomock.Controller) *MockPluginCryptFunc {
	mock := &MockPluginCryptFunc{ctrl: ctrl}
	mock.recorder = &MockPluginCryptFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginCryptFunc) EXPECT() *MockPluginCryptFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginCryptFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginCryptFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginCryptFunc)(nil).GetLevel))
}

// GetSecretKey mocks base method
func (m *MockPluginCryptFunc) GetSecretKey(mode int, pwd, key []byte) (crypto.SecretKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretKey", mode, pwd, key)
	ret0, _ := ret[0].(crypto.SecretKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretKey indicates an expected call of GetSecretKey
func (mr *MockPluginCryptFuncMockRecorder) GetSecretKey(mode, pwd, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretKey", reflect.TypeOf((*MockPluginCryptFunc)(nil).GetSecretKey), mode, pwd, key)
}

// MockPluginVerifyFunc is a mock of PluginVerifyFunc interface
type MockPluginVerifyFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginVerifyFuncMockRecorder
}

// MockPluginVerifyFuncMockRecorder is the mock recorder for MockPluginVerifyFunc
type MockPluginVerifyFuncMockRecorder struct {
	mock *MockPluginVerifyFunc
}

// NewMockPluginVerifyFunc creates a new mock instance
func NewMockPluginVerifyFunc(ctrl *gomock.Controller) *MockPluginVerifyFunc {
	mock := &MockPluginVerifyFunc{ctrl: ctrl}
	mock.recorder = &MockPluginVerifyFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginVerifyFunc) EXPECT() *MockPluginVerifyFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginVerifyFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginVerifyFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginVerifyFunc)(nil).GetLevel))
}

// GetVerifyKey mocks base method
func (m *MockPluginVerifyFunc) GetVerifyKey(key []byte, mode int) (crypto.VerifyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyKey", key, mode)
	ret0, _ := ret[0].(crypto.VerifyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyKey indicates an expected call of GetVerifyKey
func (mr *MockPluginVerifyFuncMockRecorder) GetVerifyKey(key, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyKey", reflect.TypeOf((*MockPluginVerifyFunc)(nil).GetVerifyKey), key, mode)
}

// MockPluginSignFunc is a mock of PluginSignFunc interface
type MockPluginSignFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginSignFuncMockRecorder
}

// MockPluginSignFuncMockRecorder is the mock recorder for MockPluginSignFunc
type MockPluginSignFuncMockRecorder struct {
	mock *MockPluginSignFunc
}

// NewMockPluginSignFunc creates a new mock instance
func NewMockPluginSignFunc(ctrl *gomock.Controller) *MockPluginSignFunc {
	mock := &MockPluginSignFunc{ctrl: ctrl}
	mock.recorder = &MockPluginSignFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginSignFunc) EXPECT() *MockPluginSignFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginSignFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginSignFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginSignFunc)(nil).GetLevel))
}

// GetSignKey mocks base method
func (m *MockPluginSignFunc) GetSignKey(index []byte) (crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignKey", index)
	ret0, _ := ret[0].(crypto.SignKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignKey indicates an expected call of GetSignKey
func (mr *MockPluginSignFuncMockRecorder) GetSignKey(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignKey", reflect.TypeOf((*MockPluginSignFunc)(nil).GetSignKey), index)
}

// ImportSignKey mocks base method
func (m *MockPluginSignFunc) ImportSignKey(key []byte, mode int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSignKey", key, mode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSignKey indicates an expected call of ImportSignKey
func (mr *MockPluginSignFuncMockRecorder) ImportSignKey(key, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSignKey", reflect.TypeOf((*MockPluginSignFunc)(nil).ImportSignKey), key, mode)
}

// MockPluginCreateSignFunc is a mock of PluginCreateSignFunc interface
type MockPluginCreateSignFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginCreateSignFuncMockRecorder
}

// MockPluginCreateSignFuncMockRecorder is the mock recorder for MockPluginCreateSignFunc
type MockPluginCreateSignFuncMockRecorder struct {
	mock *MockPluginCreateSignFunc
}

// NewMockPluginCreateSignFunc creates a new mock instance
func NewMockPluginCreateSignFunc(ctrl *gomock.Controller) *MockPluginCreateSignFunc {
	mock := &MockPluginCreateSignFunc{ctrl: ctrl}
	mock.recorder = &MockPluginCreateSignFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginCreateSignFunc) EXPECT() *MockPluginCreateSignFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginCreateSignFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginCreateSignFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginCreateSignFunc)(nil).GetLevel))
}

// CreateSignKey mocks base method
func (m *MockPluginCreateSignFunc) CreateSignKey(write bool, mode int) ([]byte, crypto.SignKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignKey", write, mode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(crypto.SignKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSignKey indicates an expected call of CreateSignKey
func (mr *MockPluginCreateSignFuncMockRecorder) CreateSignKey(write, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignKey", reflect.TypeOf((*MockPluginCreateSignFunc)(nil).CreateSignKey), write, mode)
}

// MockPluginEncKeyFunc is a mock of PluginEncKeyFunc interface
type MockPluginEncKeyFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginEncKeyFuncMockRecorder
}

// MockPluginEncKeyFuncMockRecorder is the mock recorder for MockPluginEncKeyFunc
type MockPluginEncKeyFuncMockRecorder struct {
	mock *MockPluginEncKeyFunc
}

// NewMockPluginEncKeyFunc creates a new mock instance
func NewMockPluginEncKeyFunc(ctrl *gomock.Controller) *MockPluginEncKeyFunc {
	mock := &MockPluginEncKeyFunc{ctrl: ctrl}
	mock.recorder = &MockPluginEncKeyFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginEncKeyFunc) EXPECT() *MockPluginEncKeyFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginEncKeyFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginEncKeyFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginEncKeyFunc)(nil).GetLevel))
}

// GetEncKey mocks base method
func (m *MockPluginEncKeyFunc) GetEncKey(key []byte, mode int) (crypto.EncKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncKey", key, mode)
	ret0, _ := ret[0].(crypto.EncKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncKey indicates an expected call of GetEncKey
func (mr *MockPluginEncKeyFuncMockRecorder) GetEncKey(key, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncKey", reflect.TypeOf((*MockPluginEncKeyFunc)(nil).GetEncKey), key, mode)
}

// MockPluginDecKeyFunc is a mock of PluginDecKeyFunc interface
type MockPluginDecKeyFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginDecKeyFuncMockRecorder
}

// MockPluginDecKeyFuncMockRecorder is the mock recorder for MockPluginDecKeyFunc
type MockPluginDecKeyFuncMockRecorder struct {
	mock *MockPluginDecKeyFunc
}

// NewMockPluginDecKeyFunc creates a new mock instance
func NewMockPluginDecKeyFunc(ctrl *gomock.Controller) *MockPluginDecKeyFunc {
	mock := &MockPluginDecKeyFunc{ctrl: ctrl}
	mock.recorder = &MockPluginDecKeyFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginDecKeyFunc) EXPECT() *MockPluginDecKeyFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginDecKeyFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginDecKeyFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginDecKeyFunc)(nil).GetLevel))
}

// GetDecKey mocks base method
func (m *MockPluginDecKeyFunc) GetDecKey(index []byte) (crypto.DecKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecKey", index)
	ret0, _ := ret[0].(crypto.DecKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecKey indicates an expected call of GetDecKey
func (mr *MockPluginDecKeyFuncMockRecorder) GetDecKey(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecKey", reflect.TypeOf((*MockPluginDecKeyFunc)(nil).GetDecKey), index)
}

// ImportDecKey mocks base method
func (m *MockPluginDecKeyFunc) ImportDecKey(key []byte, mode int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDecKey", key, mode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDecKey indicates an expected call of ImportDecKey
func (mr *MockPluginDecKeyFuncMockRecorder) ImportDecKey(key, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDecKey", reflect.TypeOf((*MockPluginDecKeyFunc)(nil).ImportDecKey), key, mode)
}

// MockPluginCreateDecKeyFunc is a mock of PluginCreateDecKeyFunc interface
type MockPluginCreateDecKeyFunc struct {
	ctrl     *gomock.Controller
	recorder *MockPluginCreateDecKeyFuncMockRecorder
}

// MockPluginCreateDecKeyFuncMockRecorder is the mock recorder for MockPluginCreateDecKeyFunc
type MockPluginCreateDecKeyFuncMockRecorder struct {
	mock *MockPluginCreateDecKeyFunc
}

// NewMockPluginCreateDecKeyFunc creates a new mock instance
func NewMockPluginCreateDecKeyFunc(ctrl *gomock.Controller) *MockPluginCreateDecKeyFunc {
	mock := &MockPluginCreateDecKeyFunc{ctrl: ctrl}
	mock.recorder = &MockPluginCreateDecKeyFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginCreateDecKeyFunc) EXPECT() *MockPluginCreateDecKeyFuncMockRecorder {
	return m.recorder
}

// GetLevel mocks base method
func (m *MockPluginCreateDecKeyFunc) GetLevel() ([]int, uint8) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(uint8)
	return ret0, ret1
}

// GetLevel indicates an expected call of GetLevel
func (mr *MockPluginCreateDecKeyFuncMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockPluginCreateDecKeyFunc)(nil).GetLevel))
}

// CreateDecKey mocks base method
func (m *MockPluginCreateDecKeyFunc) CreateDecKey(write bool, mode int) ([]byte, crypto.DecKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDecKey", write, mode)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(crypto.DecKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDecKey indicates an expected call of CreateDecKey
func (mr *MockPluginCreateDecKeyFuncMockRecorder) CreateDecKey(write, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDecKey", reflect.TypeOf((*MockPluginCreateDecKeyFunc)(nil).CreateDecKey), write, mode)
}
